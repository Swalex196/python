using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class CarButNpc : MonoBehaviour
{
    private float varsayilan_hiz; // Aracın rastgele atanacak varsayılan hızı
    private int gidilen_serit;   // Aracın hangi şeritte gideceğini belirler
    public int car_sprite;       // Rastgele seçilecek olan aracın sprite'ını tutar

    // Araç sprite'ları (görseller)
    public Sprite car1, car2, car3, car4, car5, car6, car7, car8, car9, car10, car11, car12, car13, car14, car15, car16, car17, car18;
    Rigidbody2D rb;             // Rigidbody2D bileşeni, fizik hareketi için kullanılır
    SpriteRenderer spr;         // SpriteRenderer bileşeni, araca görsel atanması için kullanılır

    void Start()
    {
        spr = GetComponent<SpriteRenderer>(); // SpriteRenderer bileşenini al
        rb = GetComponent<Rigidbody2D>();    // Rigidbody2D bileşenini al
        gidilen_serit = Random.Range(1, 5);  // 1 ile 4 arasında rastgele bir şerit seç
        varsayilan_hiz = Random.Range(2.5f, 3.5f); // Rastgele hız belirle
        car_sprite = Random.Range(1, 19);    // 1 ile 18 arasında rastgele bir sprite seç

        // Şeride göre aracın x pozisyonunu ayarla
        if (gidilen_serit == 1)
        {
            transform.position = new Vector3(-1.45f, transform.position.y + 10, 0); // Birinci şerit
        }
        else if (gidilen_serit == 2)
        {
            transform.position = new Vector3(-0.5f, transform.position.y + 10, 0); // İkinci şerit
        }
        else if (gidilen_serit == 3)
        {
            transform.position = new Vector3(0.5f, transform.position.y + 10, 0); // Üçüncü şerit
        }
        else
        {
            transform.position = new Vector3(1.45f, transform.position.y + 10, 0); // Dördüncü şerit
        }

        // Rastgele seçilen car_sprite değerine göre sprite'ı ata
        switch (car_sprite)
        {
            case 1:
                spr.sprite = car1;
                break;
            case 2:
                spr.sprite = car2;
                break;
            case 3:
                spr.sprite = car3;
                break;
            case 4:
                spr.sprite = car4;
                break;
            case 5:
                spr.sprite = car5;
                break;
            case 6:
                spr.sprite = car6;
                break;
            case 7:
                spr.sprite = car7;
                break;
            case 8:
                spr.sprite = car8;
                break;
            case 9:
                spr.sprite = car9;
                break;
            case 10:
                spr.sprite = car10;
                break;
            case 11:
                spr.sprite = car11;
                break;
            case 12:
                spr.sprite = car12;
                break;
            case 13:
                spr.sprite = car13;
                break;
            case 14:
                spr.sprite = car14;
                break;
            case 15:
                spr.sprite = car15;
                break;
            case 16:
                spr.sprite = car16;
                break;
            case 17:
                spr.sprite = car17;
                break;
            case 18:
                spr.sprite = car18;
                break;
        }
    }

    void FixedUpdate()
    {
        // Aracın hızını ayarla (yön y ekseni)
        rb.velocity = new Vector3(rb.velocity.x, varsayilan_hiz * 80 * Time.deltaTime, 0);
    }

    void OnCollisionEnter2D(Collision2D temas)
    {
        // Eğer çarpılan nesne "mainCar" etiketi taşıyorsa, 2. sahneyi yükle
        if (temas.gameObject.tag == "mainCar")
        {
            SceneManager.LoadScene(2);
        }
    }

    void OnTriggerEnter2D(Collider2D temas)
    {
        // Eğer tetiklenen nesne "Sollama" etiketi taşıyorsa, skor artır
        if (temas.gameObject.tag == "Sollama")
        {
            ScoreManager.skor += 55f; // Skora 55 puan ekle
        }
    }
}
